Structure for GameBoy Emulator:

Main.c -> runs emulator

Emulator
 -> runs/starts the emulator
 -> checks if game is running/paused
 -> increases ticks -> manages CPU cycles

CPU
 -> registers and flags handling
 -> instruction set
 ---> CPU Fetch
	-> fetch data from bus/registers
 ---> CPU Process
	-> set flags
	-> read/process input from bus/registers
	-> process different instructions e.g. cor, daa, ei, etc.
 ---> CPU Util
	-> manage registers

Bus
 -> manages communication between structures
 -> write/read from bus (read 16 bit -> get 8bit; write 8 bit into 16 bit adress)
 -> (maybe include 16 bit bus)
 -> uses memory management eg. // 0x0000 - 0x3FFF : ROM Bank 0
				// 0x4000 - 0x7FFF : ROM Bank 1 - Switchable
Cartridge
 -> structure : filename, rom size, rom data, header, ram, rom, battery
 -> rom types e.g. Rom only, MBC1, etc.
 -> LIC Code (licence Codes)
 -> cart read/write/load
 -> cart battery load/save

Instructions
 -> declare all different instructions with their address code e.g.  [0x00] = {IN_NOP, AM_IMP}
 -> look up for instructions and registers -> get name of intructions/registers as char 
	-> helps with debugging and testing instructions
 -> functions to convert instructions to string (with look up function)

IO
 -> read/write

Interrupts
 -> send signal to CPU for handling input from other sources
 -> handle/check for interrupts 
 -> 4 types of intterupts -> LCD/Display, Timer, Serial, Joypad


Pixel Processing Unit
 -> show/manage tile map
 -> update display OAM (Sprite Attribute Table) and VRAM/LCD
 ---> PPU Pipeline
	-> fetch and load sprite/pixels
	-> manage window
	-> FIFO (First In First Out) to update Window
 ---> LCD Screen
	-> main game window
	-> update color/grey palette

Timer
 -> timer to send intterputs after a certain number of clocks
 -> tick/write/read

RAM
 -> WRAM (Working RAM)/HRAM (High RAM)
 -> read write for wram and hram 

Stack
 -> push/pop
 -> push/pop for 16 bit

UI (User Interface)
 -> Use SDL? maybe OpenGL?
 -> initialize
 -> delay function
 -> get ticks
 -> update window
 -> get key input
 -> handle events



