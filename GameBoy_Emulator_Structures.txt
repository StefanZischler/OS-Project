Structure for GameBoy Emulator:

Main.c -> runs emulator

Emulator
 -> runs/starts the emulator
 -> checks if game is running/paused
 -> increases ticks -> manages CPU cycles

CPU
 -> registers and flags handling
 -> instruction set
 ---> CPU Fetch
	-> fetch data from bus/registers
 ---> CPU Process
	-> set flags
	-> read/process input from bus/registers
	-> process different instructions e.g. cor, daa, ei, etc.
	-> implement instructions
 ---> CPU Util
	-> manage registers

Bus
 -> manages communication between structures
 -> write/read from bus (read 16 bit -> get 8bit; write 8 bit into 16 bit adress)
 -> (maybe include 16 bit bus)
 -> uses memory management eg. // 0x0000 - 0x3FFF : ROM Bank 0
				// 0x4000 - 0x7FFF : ROM Bank 1 - Switchable
 -> bus calls different function depending with address it gets
	 e.g. if (address < 0xE000) { return working_ram(address)}
Cartridge/ROM
 -> structure : filename, rom size, rom data, header, ram, rom, battery
 -> rom types e.g. Rom only, MBC1, etc.
 -> LIC Code (licence Codes)
 -> cart read/write/load
 -> cart battery load/save

Instructions
 -> declare all different instructions with their address code e.g.  [0x00] = {IN_NOP, AM_IMP}
 -> look up for instructions and registers -> get name of intructions/registers as char 
	-> helps with debugging and testing instructions
 -> functions to convert instructions to string (with look up function)

IO
 -> read/write

Interrupts
 -> send signal to CPU for handling input from other sources
 -> handle/check for interrupts 
 -> 4 types of intterupts -> LCD/Display, Timer, Serial, Joypad


Pixel Processing Unit
 -> show/manage tile map
 -> update display OAM (Sprite Attribute Table) and VRAM/LCD
 ---> PPU Pipeline
	-> fetch and load sprite/pixels
	-> manage window
	-> FIFO (First In First Out) to update Window
 ---> LCD Screen
	-> main game window
	-> update color/grey palette

Timer
 -> timer to send intterputs after a certain number of clocks
 -> tick/write/read

RAM
 -> WRAM (Working RAM)/HRAM (High RAM)
 -> read write for wram and hram 

Stack
 -> push/pop
 -> push/pop for 16 bit

UI (User Interface)
 -> Use SDL? maybe OpenGL?
 -> initialize
 -> delay function
 -> get ticks
 -> update window
 -> get key input
 -> handle events

Video Tutorial:
Part 1: (main.c/emu.h/emu.c/cart.h/cart.c/etc.)loading project, reading/parsing cartridge/ROM
Part 2: (bus.c/cpu.c/cpu.util/instructions.c) start bus, explanation how instruction work, setup instruction, 
setup CPU files to parse/process instructions, start with some instruction implementation
Part 3: (cpu_proc.c)process CPU instructions
Part 4: (bus.c/cpu_proc.c/instructions.c) fetch_data from instructions, implement load/LD instructions
Part 5: (ram.h/ram.c/bus.c) implement working and high RAM (wram/hram), upgrade bus
Part 6: (instructions.c/cpu_proc.c/stack.h/stack.c) implement jump instruction (JP/JR/PUSH/POP/CALL/RET/RETI), implement Stack 
Part 7: (cpu_proc.c/instructions.c) implement arithmetic instruction (INC/DEC/ADD/ADC/SUB/SBC)
Part 8: (cpu_proc.c/instructions.c) implement bit-wise/logic instructions (AND/XOR/OR/CP/SBC), implement special instruction set PREFIX position CB
Part 9: (cpu_proc.c/instructions.c/interrupts.h/interrupts.c/ui.h/ui.c) implement special instructions (), handle interrupts, 
running CPU in its own thread, create screen window
Part 10: (cpu_proc.c/instructions.c/io.h/io.c/emu.c/timer.c/timer.h) finish and bugfix instructions, include io proccessing for serial input from tests, (dbg.h/dbg.c only for tests/debugging),
implement timer (for interrupts)
Part 11: (ppu.c/ppu.h/dma.h/dma.c) implementing Pixel Proccesing Unit, works with OAM_RAM and VRAM, create debug window for tiles, Direct Memory Access(dma) for reading tiles from ROMs
Part 12: (ppu.c/ppu.h/lcd.h/lcd.c/ppu_sm.h/ppu_sm.c) implement LCD (registers and modes), implement PPU State Machine (which mode the ppu is on (hblank, vblank, oam, xfer)
Part 13: (ppu.c/ppu.h/ppu_pipeline.c) implement PPU pipeline (FIFO), render background
Part 14: (ppu.c/ppu.h/ppu_sm.c/ppu_pipeline.c) add sprites (OAM_RAM) to PPU
Part 15: (ppu.c/ppu.h/ppu_sm.c/ppu_pipeline.c/gamepad.h/gamepad.c/io.h/io.c/ui.c) add window, add gamepad
Part 16: (cart.c/cart.h) add support for MBC1